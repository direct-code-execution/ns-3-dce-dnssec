diff -r b8ced6ccb82c model/dce-credentials.cc
--- a/model/dce-credentials.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-credentials.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -53,3 +53,15 @@
   int ret = eaccess (rPath.c_str (), mode);
   return ret;
 }
+int dce_chown(const char *path, uid_t owner, gid_t group)
+{
+  // XXX
+  return 0;
+}
+
+int dce_initgroups(const char *user, gid_t group)
+{
+  // XXX
+  return 0;
+}
+
diff -r b8ced6ccb82c model/dce-manager.cc
--- a/model/dce-manager.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-manager.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -115,6 +115,24 @@
   Object::DoDispose ();
 }
 
+// January 1st, 2010, 00:00:00
+uint32_t DceManager::m_timeBase = 1262304000;
+
+void
+DceManager::SetTimeBase (uint32_t timeBase)
+{
+  m_timeBase = timeBase;
+  return;
+}
+
+uint32_t
+DceManager::GetTimeBase (void)
+{
+  return m_timeBase;
+  //   unsigned long secondsSinceEpochOnFridayApril042008 = 1207284276;
+  //   return secondsSinceEpochOnFridayApril042008;
+}
+
 struct ::Libc *
 DceManager::GetLibc (void)
 {
diff -r b8ced6ccb82c model/dce-manager.h
--- a/model/dce-manager.h	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-manager.h	Sun Aug 25 12:11:31 2013 +0900
@@ -125,6 +125,8 @@
   void SuspendTemporaryTask (uint16_t pid);
   struct Process* CreateProcess (std::string name, std::string stdinfilename, std::vector<std::string> args,
                                  std::vector<std::pair<std::string,std::string> > envs, int pid);
+  static void SetTimeBase (uint32_t timeBase);
+  static uint32_t GetTimeBase (void);
 
 private:
   // inherited from Object.
@@ -161,6 +163,7 @@
   // If true close stderr and stdout between writes .
   bool m_minimizeFiles;
   std::string m_virtualPath;
+  static uint32_t m_timeBase;
 };
 
 } // namespace ns3
diff -r b8ced6ccb82c model/dce-poll.cc
--- a/model/dce-poll.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-poll.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -187,11 +187,8 @@
   // Some  code  calls  select() with all three sets empty, nfds zero, and a
   // non-NULL timeout as a fairly portable way to sleep with subsecond
   // precision.
-  if (nfds == 0 && !timeout)
-    {
-      current->err = EINVAL;
-      return -1;
-    }
+  // 130825: this condition will be passed by dce_poll ()
+
   struct pollfd pollFd[nfds];
   int j = 0;
 
diff -r b8ced6ccb82c model/dce-stdio.cc
--- a/model/dce-stdio.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-stdio.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -759,6 +759,16 @@
   va_end (ap);
   return retval;
 }
+int dce___vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
+						size_t __slen,
+						__const char *__restrict __format, _G_va_list __ap)
+{
+  NS_LOG_FUNCTION (Current () << UtilsGetNodeId ());
+  NS_ASSERT (Current () != 0);
+
+  int retval = vsnprintf (__s, __n, __format, __ap);
+  return retval;
+}
 void dce___fpurge (FILE *stream)
 {
   NS_LOG_FUNCTION (Current () << UtilsGetNodeId () << stream);
diff -r b8ced6ccb82c model/dce-stdio.h
--- a/model/dce-stdio.h	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-stdio.h	Sun Aug 25 12:11:31 2013 +0900
@@ -71,6 +71,10 @@
 int dce_asprintf (char **strp, const char *fmt, ...);
 int dce_vasprintf (char **strp, const char *fmt, va_list ap);
 int dce_vsnprintf (char *s, size_t si, const char *f, va_list ap);
+int dce___vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
+                                               size_t __slen,
+                         __const char *__restrict __format, _G_va_list __ap);
+
 
 #ifdef __cplusplus
 }
diff -r b8ced6ccb82c model/dce-syslog.cc
--- a/model/dce-syslog.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-syslog.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -66,4 +66,5 @@
   Process *process = Current ()->process;
 
   vfprintf (process->syslog, message, args);
+  fprintf (process->syslog, "\n");
 }
diff -r b8ced6ccb82c model/dce-unistd.h
--- a/model/dce-unistd.h	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce-unistd.h	Sun Aug 25 12:11:31 2013 +0900
@@ -77,6 +77,8 @@
 
 ssize_t dce_pread (int fd, void *buf, size_t count, off_t offset);
 ssize_t dce_pwrite (int fd, const void *buf, size_t count, off_t offset);
+int dce_chown(const char *path, uid_t owner, gid_t group);
+int dce_initgroups(const char *user, gid_t group);
 
 int dce_daemon (int nochdir, int noclose);
 
diff -r b8ced6ccb82c model/dce.cc
--- a/model/dce.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/dce.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -142,7 +142,7 @@
       return -1;
     }
   if (sgid != (gid_t)-1
-      || !is_set_ucapable (sgid))
+      && !is_set_ucapable (sgid))
     {
       current->err = EPERM;
       return -1;
diff -r b8ced6ccb82c model/libc-ns3.h
--- a/model/libc-ns3.h	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/libc-ns3.h	Sun Aug 25 12:11:31 2013 +0900
@@ -252,6 +252,8 @@
 DCE (daemon)
 DCE (alarm)
 DCE (readlink)
+DCE (chown)
+DCE (initgroups)
 
 // SYS/UIO.H
 DCE (readv)
@@ -307,6 +309,8 @@
 DCE (remove)
 //NATIVE (sscanf)
 NATIVE_WITH_ALIAS2 (sscanf, __isoc99_sscanf)
+NATIVE (flockfile)
+NATIVE (funlockfile)
 
 // STDARG.H
 DCE (vprintf)
@@ -375,6 +379,7 @@
 NATIVE (sigismember)
 DCE (sigprocmask)
 DCE    (sigwait)
+DCE    (kill)
 
 // PTHREAD.H
 DCE (pthread_create)
@@ -413,6 +418,11 @@
 NATIVE (pthread_setcancelstate)
 NATIVE (pthread_sigmask)
 NATIVE (pthread_equal)
+NATIVE (pthread_spin_init)
+NATIVE (pthread_spin_lock)
+NATIVE (pthread_spin_unlock)
+NATIVE (pthread_spin_destroy)
+
 
 // SEMAPHORE.H
 DCE (sem_init)
@@ -508,6 +518,8 @@
 NATIVE (bindtextdomain)
 NATIVE (textdomain)
 NATIVE (gettext)
+NATIVE (catopen)
+NATIVE (catgets)
 
 // PWD.H
 NATIVE (getpwnam)
@@ -569,6 +581,7 @@
 DCE    (__fprintf_chk)
 DCE    (__snprintf_chk)
 DCE    (__errno_location)
+DCE    (__vsnprintf_chk)
 
 DCE    (__xstat)
 DCE    (__lxstat)
diff -r b8ced6ccb82c model/process-delay-model.cc
--- a/model/process-delay-model.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/process-delay-model.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -18,12 +18,14 @@
  * Author: Mathieu Lacage <mathieu.lacage@sophia.inria.fr>
  */
 #include "process-delay-model.h"
+#include "ns3/log.h"
 #include <sys/time.h>
 #include <time.h>
 
 namespace ns3 {
 
 NS_OBJECT_ENSURE_REGISTERED (ProcessDelayModel);
+NS_LOG_COMPONENT_DEFINE ("ProcessDelayModel");
 
 TypeId
 ProcessDelayModel::GetTypeId (void)
@@ -99,11 +101,13 @@
 void
 TimeOfDayProcessDelayModel::RecordStart (void)
 {
+  NS_LOG_FUNCTION (this);
   m_start = GetTimeOfDay ();
 }
 Time
 TimeOfDayProcessDelayModel::RecordEnd (void)
 {
+  NS_LOG_FUNCTION (this);
   Time delay = GetTimeOfDay () - m_start;
   if (delay.IsZero ())
     {
diff -r b8ced6ccb82c model/task-manager.cc
--- a/model/task-manager.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/task-manager.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -445,6 +445,7 @@
             }
           if (m_reSchedule)
             {
+              NS_LOG_DEBUG ("Delayed schedule " << m_reScheduleTime);
               m_reSchedule = false;
               if (m_reScheduleTime > Time (0))
                 {
@@ -473,8 +474,8 @@
       // we have something to schedule from.
       // but, we have nothing to schedule to so, we go back to the main task.
       Time delay = m_delayModel->RecordEnd ();
-      NS_LOG_DEBUG ("Leaving " << m_current << ", delay " << delay << " entering main");
       struct Task *next = m_scheduler->PeekNext ();
+      NS_LOG_DEBUG ("Leaving " << m_current << ", delay " << delay << " next = " << next << " entering main");
       if (next != 0)
         {
           // but before leaving, we check if we have further processes active, and,
diff -r b8ced6ccb82c model/utils.cc
--- a/model/utils.cc	Thu Apr 18 17:28:13 2013 +0900
+++ b/model/utils.cc	Sun Aug 25 12:11:31 2013 +0900
@@ -15,11 +15,21 @@
 #include <fcntl.h>
 #include <unistd.h>
 #include "file-usage.h"
+#include "ns3/global-value.h"
+#include "ns3/uinteger.h"
 
 NS_LOG_COMPONENT_DEFINE ("ProcessUtils");
 
 namespace ns3 {
 
+GlobalValue g_timeBase = GlobalValue ("SimulationTimeBase",
+                                      "The timebase for this simulation",
+                                      // January 1st, 2010, 00:00:00
+                                      UintegerValue (1262304000),
+                                      MakeUintegerChecker<uint32_t> ());
+  //   unsigned long secondsSinceEpochOnFridayApril042008 = 1207284276;
+  //   return secondsSinceEpochOnFridayApril042008;
+
 uint32_t UtilsGetNodeId (void)
 {
   if (gDisposingThreadContext)
@@ -143,19 +153,17 @@
   tv.tv_nsec = n % 1000000000;
   return tv;
 }
-static unsigned long TimeBase (void)
-{
-//   unsigned long secondsSinceEpochOnFridayApril042008 = 1207284276;
-//   return secondsSinceEpochOnFridayApril042008;
-  return 1262304000; // January 1st, 2010, 00:00:00
-}
 Time UtilsSimulationTimeToTime (Time time)
 {
-  return time + Seconds (TimeBase ());
+  UintegerValue uintegerValue;
+  GlobalValue::GetValueByName ("SimulationTimeBase", uintegerValue);
+  return time + Seconds (uintegerValue.Get ());
 }
 Time UtilsTimeToSimulationTime (Time time)
 {
-  return time - Seconds (TimeBase ());
+  UintegerValue uintegerValue;
+  GlobalValue::GetValueByName ("SimulationTimeBase", uintegerValue);
+  return time - Seconds (uintegerValue.Get ());
 }
 Time UtilsTimevalToTime (struct timeval tv)
 {
